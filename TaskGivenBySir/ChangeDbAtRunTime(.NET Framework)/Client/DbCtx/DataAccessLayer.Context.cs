//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticeForTest.DbCtx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Configuration;
    using System.Data.SqlClient;

    public partial class MukeshDb : DbContext
    {
        public MukeshDb()
            : base(ModifyConnectionString("MukeshDb"))
        {
        }

        /*private static string ModifyConnectionString(string databaseName)
        {
            // Original connection string

            var connectionString = ConfigurationManager.ConnectionStrings["MukeshDb"].ConnectionString;
            // Split the connection string
            string[] parts = connectionString.Split(';');

            // Find and modify the initial catalog
            for (int i = 0; i < parts.Length; i++)
            {
                if (parts[i].Trim().StartsWith("initial catalog", StringComparison.InvariantCultureIgnoreCase))
                {
                    parts[i] = $"initial catalog={databaseName}";
                    break;
                }
            }

            // Join the modified parts back into a connection string
            return string.Join(";", parts);
        }*/

        private static string ModifyConnectionString(string databaseName)
        {
            // Original connection string

            var connectionString = ConfigurationManager.ConnectionStrings["MukeshDb"].ConnectionString;
            // Replace the initial catalog with the desired database name
            connectionString = connectionString.Replace("initial catalog=xxxx", $"initial catalog={databaseName}");

            return connectionString;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<Friend> Friends { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int DeleteData(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteData", idParameter);
        }
    
        public virtual ObjectResult<GetData_Result> GetData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetData_Result>("GetData");
        }
    
        public virtual ObjectResult<GetUserById_Result> GetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserById_Result>("GetUserById", idParameter);
        }
    
        public virtual int InsertData(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertData", nameParameter);
        }
    
        public virtual int UpdateData(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateData", idParameter, nameParameter);
        }
    }
}
